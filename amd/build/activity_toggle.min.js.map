{"version":3,"file":"activity_toggle.min.js","sources":["../src/activity_toggle.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Activity toggle for accommodations.\n *\n * @module     local_accommodations/activity_toggle\n * @copyright  2025 Your Name <your.email@example.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax', 'core/str', 'core/notification'], function($, Ajax, Str, Notification) {\n    /**\n     * Initialize the activity toggles.\n     */\n    var init = function() {\n        // Handle toggle changes\n        $(document).on('change', '.activity-toggle', function() {\n            var toggle = $(this);\n            var cmid = toggle.data('cmid');\n            var courseid = toggle.data('courseid');\n            var status = toggle.prop('checked') ? 0 : 1; // Status = 1 means disabled\n\n            // Disable toggle while processing\n            toggle.prop('disabled', true);\n\n            // Update the status via AJAX\n            updateActivityStatus(cmid, courseid, status).then(function(success) {\n                if (success) {\n                    // Show success notification\n                    return Str.get_string(status ? 'disabled' : 'enabled', 'local_accommodations').then(function(statusText) {\n                        return Str.get_string(\n                            'accommodationsstatusupdated',\n                            'local_accommodations',\n                            statusText).then(function(message) {\n                            Notification.addNotification({\n                                message: message,\n                                type: 'success'\n                            });\n                        });\n                    });\n                } else {\n                    // Revert toggle if failed\n                    toggle.prop('checked', !toggle.prop('checked'));\n\n                    // Show error notification\n                    return Str.get_string('statusupdatefailed', 'local_accommodations').then(function(message) {\n                        Notification.addNotification({\n                            message: message,\n                            type: 'error'\n                        });\n                    });\n                }\n            }).catch(function(error) {\n                // Revert toggle if error\n                toggle.prop('checked', !toggle.prop('checked'));\n                Notification.exception(error);\n            }).always(function() {\n                // Re-enable toggle\n                toggle.prop('disabled', false);\n            });\n        });\n\n        /**\n         * Update activity accommodation status.\n         *\n         * @param {number} cmid Course module ID\n         * @param {number} courseid Course ID\n         * @param {number} status Status (0 = enabled, 1 = disabled)\n         * @return {Promise} Promise resolved with success boolean\n         */\n        function updateActivityStatus(cmid, courseid, status) {\n            var promises = Ajax.call([{\n                methodname: 'local_accommodations_toggle_activity',\n                args: {\n                    cmid: cmid,\n                    courseid: courseid,\n                    status: status\n                }\n            }]);\n\n            return promises[0];\n        }\n    };\n\n    return {\n        init: init\n    };\n});"],"names":["define","$","Ajax","Str","Notification","init","document","on","toggle","this","cmid","data","courseid","status","prop","call","methodname","args","updateActivityStatus","then","success","get_string","statusText","message","addNotification","type","catch","error","exception","always"],"mappings":";;;;;;;AAuBAA,8CAAO,CAAC,SAAU,YAAa,WAAY,sBAAsB,SAASC,EAAGC,KAAMC,IAAKC,oBA0E7E,CACHC,KAvEO,WAEPJ,EAAEK,UAAUC,GAAG,SAAU,oBAAoB,eACrCC,OAASP,EAAEQ,MACXC,KAAOF,OAAOG,KAAK,QACnBC,SAAWJ,OAAOG,KAAK,YACvBE,OAASL,OAAOM,KAAK,WAAa,EAAI,EAG1CN,OAAOM,KAAK,YAAY,YA+CEJ,KAAME,SAAUC,eAC3BX,KAAKa,KAAK,CAAC,CACtBC,WAAY,uCACZC,KAAM,CACFP,KAAMA,KACNE,SAAUA,SACVC,OAAQA,WAIA,GAtDhBK,CAAqBR,KAAME,SAAUC,QAAQM,MAAK,SAASC,gBACnDA,QAEOjB,IAAIkB,WAAWR,OAAS,WAAa,UAAW,wBAAwBM,MAAK,SAASG,mBAClFnB,IAAIkB,WACP,8BACA,uBACAC,YAAYH,MAAK,SAASI,SAC1BnB,aAAaoB,gBAAgB,CACzBD,QAASA,QACTE,KAAM,mBAMlBjB,OAAOM,KAAK,WAAYN,OAAOM,KAAK,YAG7BX,IAAIkB,WAAW,qBAAsB,wBAAwBF,MAAK,SAASI,SAC9EnB,aAAaoB,gBAAgB,CACzBD,QAASA,QACTE,KAAM,iBAInBC,OAAM,SAASC,OAEdnB,OAAOM,KAAK,WAAYN,OAAOM,KAAK,YACpCV,aAAawB,UAAUD,UACxBE,QAAO,WAENrB,OAAOM,KAAK,YAAY"}